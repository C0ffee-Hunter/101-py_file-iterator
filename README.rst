101-py-file-iterator-template
=============================

Шаблонный репозиторий задания "Разработка класса-итератора по файловой системе на Python" (LEARNING_CENTER-101)

Ответы на вопросы
=================
1) В чем отличие генератора от итератора?

Итератор - это объект, который реализует протокол итерации. Это означает, что он предоставляет два метода:
iter(): Возвращает сам объект итератора.
next(): Возвращает следующий элемент последовательности или поднимает исключение.


Генератор - это специальный тип функции, которая возвращает итератор. Генераторы используют ключевое слово 'yield' вместо 'return' для возврата значений.
Генераторы "запоминают" свое состояние между вызовами 'next()'. Когда вызывается 'next()', генератор возобновляет работу с того места, на котором остановился.
Генераторы не генерируют все значения сразу. Они генерируют их по одному, по мере необходимости.
    
2) Является ли генератор итератором? А наборот?
Генератор всегда является итератором, так как генератор реализует протокол итерации, поэтому он автоматически является итератором. Но при этом, не каждый итератор является генератором из-за того, что гераторы могут быть реализованы как классы.

1. Реализация
Генератор - это специальная функция, которая использует ключевое слово 'yield' для возврата значений. 
Итератор - класс, который реализует методы 'iter()' и 'next()'.

2. Состояние
Генератор сохраняет свое внутреннее состояние между вызовами 'next()'. Это позволяет генератору запомнить, где он остановился, и продолжить работу с того же места.
Итератор может сохранять или не сохранять состояние. Некоторые итераторы могут запоминать, где они остановились, а некоторые могут каждый раз начинать с начала.

3. Ленивая генерация
Генератор генерирует значения по запросу. То есть, он не генерирует все значения сразу, а только те, которые нужны в данный момент.
Итератор может генерировать значения сразу или по запросу. Например, список — это итератор, который генерирует все значения сразу. 

Все генераторы являются итераторами, но не все итераторы являются генераторами.

Tests
=====

Для запуска тестов необходимо выполнить из директории проекта следующую команду:

```
python3 -m unittest discover tests
```
